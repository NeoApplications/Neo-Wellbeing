import java.nio.file.Files

plugins {
	id 'com.android.application'
	id 'org.jetbrains.kotlin.android'
}

android {
	compileSdk 33

	defaultConfig {
		applicationId "org.eu.droid_ng.wellbeing"
		minSdk 29
		targetSdk 33
		versionCode 1
		versionName "0.1.0"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
	}

	sourceSets.main.java.srcDirs += ['src/main/java_magisk']

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}
	kotlinOptions {
		jvmTarget = '11'
	}
	namespace 'org.eu.droid_ng.wellbeing'
}

dependencies {
	def lifecycle_version = "2.5.1" // Version needs to match
	implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
	implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

	implementation 'androidx.recyclerview:recyclerview:1.2.1'
	implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
	implementation 'androidx.cardview:cardview:1.0.0'
	implementation 'androidx.preference:preference:1.2.0'
	implementation 'androidx.appcompat:appcompat:1.5.1'
	implementation 'com.google.android.material:material:1.7.0'
	// For gradle builds only
	implementation 'org.lsposed.hiddenapibypass:hiddenapibypass:4.3'
}

def magiskModuleProp = [
		id           : "neo_wellbeing",
		name         : "Neo Wellbeing systemless",
		version      : android.defaultConfig.versionName,
		versionCode  : android.defaultConfig.versionCode,
		minApi       : android.defaultConfig.minSdk,
		support      : "https://github.com/NeoApplications/Neo-Wellbeing",
		config       : "org.eu.droid_ng.wellbeing",
		author       : "nift4",
		description  : "Neo Wellbeing is an open source reimplementation of Wellbeing"
]

def outDir = rootProject.buildDir
def magiskDir = file("$outDir/magisk_module")
def zipName = "NeoWellbeing-${android.defaultConfig.versionName}.zip"

task assembleMagiskModule(type: Task) {
	dependsOn(":app:assembleDebug")
	doLast {
		delete(magiskDir)
		magiskDir.mkdirs()
		def modulePropText = ""
		magiskModuleProp.each { k, v -> modulePropText += "$k=$v\n" }
		file("$magiskDir/module.prop").text = modulePropText
		file("$magiskDir.path/system/priv-app/NeoWellbeing").mkdirs()
		Files.copy(file("$rootDir/app/build/outputs/apk/debug/app-debug.apk").toPath(),
				file("${magiskDir.path}/system/priv-app/NeoWellbeing/NeoWellbeing.apk").toPath())
		file("$magiskDir.path/system/product/overlay/NeoWellbeingOverlay").mkdirs()
		Files.copy(file("$rootDir/NeoWellbeingOverlay/overlay.apk").toPath(),
				file("${magiskDir.path}/system/product/overlay/NeoWellbeingOverlay/NeoWellbeingOverlay.apk").toPath())
		file("$magiskDir.path/system/etc/permissions").mkdirs()
		Files.copy(file("$rootDir/app/src/main/privapp-permissions-wellbeing.xml").toPath(),
				file("${magiskDir.path}/system/etc/permissions/privapp-permissions-wellbeing.xml").toPath())
		file("$magiskDir.path/META-INF/com/google/android").mkdirs()
		file("$magiskDir.path/META-INF/com/google/android/updater-script").text = "#MAGISK"
		Files.copy(file("$rootDir/app/update-binary").toPath(),
				file("$magiskDir.path/META-INF/com/google/android/update-binary").toPath())
		Files.copy(file("$rootDir/app/customize.sh").toPath(),
				file("$magiskDir.path/customize.sh").toPath())
	}
}

task zipMagiskModule(type: Zip) {
	from magiskDir
	archiveName zipName
	destinationDir outDir
	dependsOn(":app:assembleMagiskModule")
}